plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.firebase.appdistribution'
    id 'com.google.gms.google-services'
}

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId 'kz.zhombie.bazaar'

        minSdkVersion 21
        targetSdkVersion 30

        def versionProps = readVersionFromFile()
        versionName versionProps['versionName']
        versionCode versionProps['versionCode'] as int
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'mode'

    productFlavors {
        prod {
            dimension 'mode'

            // Define constants
            buildConfigField 'boolean', 'DEBUG', 'true'
            buildConfigField 'boolean', 'LOG', 'true'

            // Define resources
            resValue 'string', 'app_name', 'Bazaar'

            firebaseAppDistribution {
                appId = '1:888748389223:android:f197247b3cf8313d0cf5c2'
                groups = 'q19'
                serviceCredentialsFile = "$rootDir/sample/creds/bazaar-5974e-0a0b529742e3.json"
                releaseNotesFile = "$rootDir/sample/src/dev/release-notes.txt"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

ext {
    coil_version = '1.2.2'
    coroutines_version = '1.5.0'
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Activity
    implementation 'androidx.activity:activity-ktx:1.2.3'

    // Jetpack Core
    implementation 'androidx.core:core-ktx:1.5.0'

    // AppCompat
    implementation 'androidx.appcompat:appcompat:1.3.0'

    // Material components
    implementation 'com.google.android.material:material:1.4.0-rc01'

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:28.1.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // Coil
    implementation "io.coil-kt:coil:$coil_version"
    implementation "io.coil-kt:coil-gif:$coil_version"
    implementation "io.coil-kt:coil-video:$coil_version"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    // Kotlin coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Library
    implementation project(':bazaar')
}


// Auto-increments versionCode & versionName on each release build
// Adapted from http://stackoverflow.com/a/21405744
def readVersionFromFile() {
    def versionFile = file("version.properties")
    if (versionFile.canRead()) {
        Properties props = new Properties()
        props.load(new FileInputStream(versionFile))

        def versionMajor = props["versionMajor"] as int
        def versionMinor = props["versionMinor"] as int
        def versionPatch = props["versionPatch"] as int

        def versionCode = props["versionCode"] as int

        def isReleaseTask = false
        for (String taskName : gradle.startParameter.getTaskNames()) {
            if (taskName.startsWith("appDistributionUploadRelease")) {
                isReleaseTask = true
                break
            }
        }

        if (isReleaseTask) {
            if (versionPatch > 10) {
                versionPatch = 0

                if (versionMinor > 10) {
                    versionMajor += 1
                    versionMinor = 0
                } else {
                    versionMinor += 1
                }
            } else {
                versionPatch += 1
            }

            props["versionMajor"] = versionMajor.toString()
            props["versionMinor"] = versionMinor.toString()
            props["versionPatch"] = versionPatch.toString()
            props["versionName"] = props["versionMajor"] + "." + props["versionMinor"] + "." + props["versionPatch"]

            versionCode += 1
            props["versionCode"] = versionCode.toString()

            props.store(versionFile.newWriter(), null)
        }

        return props
    } else {
        throw new FileNotFoundException("Could not read version.properties")
    }
}